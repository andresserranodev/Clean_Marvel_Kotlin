apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField "String", "PRIVATE_API_KEY_VALUE", '"d6e634e314a819ca1c0f0078344acb70"'
            buildConfigField "String", "PUBLIC_API_KEY_VALUE", '"504e22423d24b530dd878fdf808fc001"'
            buildConfigField "String", "MARVEL_BASE_URL", '"http://gateway.marvel.com/public/"'

        }

        release {
            minifyEnabled false
            buildConfigField "String", "PRIVATE_API_KEY_VALUE", '"your-private-apikey"'
            buildConfigField "String", "PUBLIC_API_KEY_VALUE", '"your-public-apikey"'
            buildConfigField "String", "MARVEL_BASE_URL", '"http://gateway.marvel.com/public/"'

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':domain')

    def generalDependencies = rootProject.ext.generalDependencies
    def dataDependencies = rootProject.ext.dataDependencies
    def generalTestDependencies = rootProject.ext.generalTestDependencies

    implementation generalDependencies.rxAndroid,
            generalDependencies.rxJava,
            generalDependencies.appSupport,
            generalDependencies.kotlin



    testImplementation generalTestDependencies.junit,
            generalTestDependencies.kotlinTest

    compile dataDependencies.retrofit,
            dataDependencies.retrofitConverter

}

android.testOptions.unitTests.all {
    // Configure whether failing tests should fail the build
    ignoreFailures false

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
